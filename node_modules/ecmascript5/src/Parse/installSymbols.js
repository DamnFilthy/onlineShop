/*
module.exports = function () {
	var parse = this;
	function add (id) {
		return parse.newSymbol(id);
	}
	function symbol () {
		return parse.token.symbol;
	}
	this.symbols = {};
	this.newScope();
	add('(end)').prefix = this.itself;
	add('(literal)').prefix = this.itself;
	add('(identity)').prefix = function (tok) {
		tok[0] = tok.text;
		tok.scope = tok.scope || parse.scope;
		tok[1] = tok.value = tok.scope.find(tok);
		return tok;
	};
	add(';'); add(','); add('}');
	add(']'); add(')');
	add('else').reserve();
	add('case').reserve();
	add('throw').reserve();
	add('finally').reserve();
	add('{').prefix = function (tok) {
		if (symbol().id !== '}') {
			parse.newScope();
			tok[0] = parse.stmts(null, 0);
			parse.advance('}');
			parse.scope.pop();
			parse.advance('}');
			return tok;
		}
	};
	add(':').setupAssignment(10);
	add('=').setupAssignment(20);
	add('?').setupInfix(30, function (tok, left) {
		tok[0] = left;
		tok[1] = parse.expr(10);
		parse.advance(':');
		tok[2] = parse.expr(10);
		return tok;
	});
	add('|').setupInfix(70);
	add('^').setupInfix(80);
	add('&').setupInfix(90);
	add('<').setupInfix(100);
	add('>').setupInfix(100);
	add('+').setupInfix(130);
	add('-').setupInfix(130);
	add('*').setupInfix(140);
	add('/').setupInfix(140);
	add('%').setupInfix(140);
	add('-').setupPrefix(150);
	add('!').setupPrefix(150);
	add('(').set({
		power: 160,
		infix: function (tok, left) {
			var id = left.symbol.id;
			if (id === '.' || id === '[') {
				tok[0] = left[0];
				tok[1] = left[1];
			} else {
				tok[0] = left;
				if ((left.length !== 1 || id !== 'function' || id !== 'get' || id !== 'set') &&
				     !parse.isIdentity(left) && id !== '(' && id !== '&&' && id !== '||' && id !== '?') {
					parse.error('Expected a variable name.', tok);
				}
			}
			if (symbol().id !== ')') {
				tok.push(parse.exprs(null, 10));
			}
			parse.advance(')');
			return tok;
		},
		prefix: function (tok) {
			parse.newScope();
			tok[0] = parse.exprs(null, 10);
			parse.advance(')');
			if (symbol().id === '{') {
				parse.advance('{');
				parse.newScope();
				tok[1] = parse.stmts();
				parse.advance('}');
				parse.scope.pop();
			}
			parse.scope.pop();
			return tok;
		}
	});
	add('.').setupInfix(170, function (tok, left) {
		tok[0] = left;
		tok[1] = parse.expr(10);
		return tok;
	});
	add('[').set({
		power: 170,
		infix: function (tok, left) {
			tok[0] = left;
			tok[1] = parse.expr(10);
			parse.advance(']');
			return this;
		},
		prefix: function (tok) {
			if (symbol().id !== ']') {
				while (true) {
					tok.push(parse.exprs(null, 10));
					if (symbol().id !== ',') {
						break;
					}
					parse.advance(',');
				}
			}
			parse.advance(']');
			return tok;
		}
	});
	add('+=').setupAssignment(20);
	add('-=').setupAssignment(20);
	add('*=').setupAssignment(20);
	add('/=').setupAssignment(20);
	add('%=').setupAssignment(20);
	add('&=').setupAssignment(20);
	add('|=').setupAssignment(20);
	add('^=').setupAssignment(20);
	add('||').setupInfixRight(40);
	add('&&').setupInfixRight(50);
	add('==').setupInfix(100);
	add('!=').setupInfix(100);
	add('<=').setupInfix(100);
	add('>=').setupInfix(100);
	add('<<').setupInfix(120);
	add('>>').setupInfix(120);
	add('..').setupInfix(160, function (tok, left) {
		tok[0] = left;
		tok[1] = parse.expr(10);
		return tok;
	});
	add('||=').setupAssignment(20);
	add('&&=').setupAssignment(20);
	add('<<=').setupAssignment(20);
	add('>>=').setupAssignment(20);
	add('===').setupInfix(100);
	add('!==').setupInfix(100);
	add('>>>').setupInfix(120);
	add('>>>=').setupAssignment(20);
	add('self').reserve().prefix = this.itself;
	add('this').reserve().prefix = this.itself;
	add('eval').reserve().prefix = this.itself;
	add('super').reserve().prefix = this.itself;
	add('debugger').reserve().prefix = this.itself;
	add('arguments').reserve().prefix = this.itself;
	add('undefined').reserve().setupConstant(undefined);
	add('Infinity').reserve().setupConstant(Infinity);
	add('true').reserve().setupConstant(true);
	add('false').reserve().setupConstant(false);
	add('null').reserve().setupConstant(null);
	add('NaN').reserve().setupConstant(NaN);
	add('and').reserve().setupInfixRight(50);
	add('or').reserve().setupInfixRight(40);
	add('in').reserve().setupInfix(120);
	add('is').reserve().setupInfix(120);
	add('instanceof').reserve().setupInfix(120);
	add('typeof').reserve().setupPrefix(150);
	add('new').reserve().setupPrefix(150);
	add('not').reserve().setupPrefix(150);
	add('void').reserve().setupPrefix(150);
	add('export').reserve().setupPrefix(150);
	add('class').reserve().prefix = function (tok) {
		if (parse.isIdentity()) {
			tok[0] = parse.path();
		}
		parse.block(tok, 1);
		return tok;
	};
	add('module').reserve().prefix = function (tok) {
		if (parse.isIdentity()) {
			tok[0] = parse.path();
		}
		parse.block(tok, 1);
		return tok;
	};
	add('function').reserve().prefix = function (tok) {
		if (symbol().id === '(identity)') {
			parse.scope.define(parse.token);
			tok.name = parse.token.text;
			parse.advance();
		}
		parse.proc(tok);
		return tok;
	};
	add('get').reserve().prefix = add('function').prefix;
	add('set').reserve().prefix = add('function').prefix;
	add('if').reserve().statement = function (tok) {
		parse.advance('(');
		tok[0] = parse.exprs(null, 10);
		parse.advance(')');
		tok[1] = parse.block();
		if (symbol().id === 'else') {
			parse.scope.reserve(parse.token, parse.token.symbol);
			parse.advance('else');
			tok[2] = parse[(symbol().id === 'if' ?
				'stmt' : 'block')]();
		} else {
			tok[2] = null;
		}
		return tok;
	};
	add('try').reserve().statement = function (tok) {
		return tok;
	};
	add('var').reserve().statement = function (tok) {
		parse.names(tok, function (name) {
			this.scope.define(name);
			if (('=:').indexOf(symbol().id) !== -1) {
				var t = this.token;
				this.advance(symbol().id);
				t[0] = name;
				t[1] = parse.expr(10);
				return t;
			} else {
				return name;
			}
		});
		parse.advance(';');
		return tok;
	};
	add('use').reserve().statement = function (tok) {
		tok[0] = parse.pathlist();
		parse.advance(';');
		return tok;
	};
	add('for').reserve().statement = function (tok) {
		parse.advance('(');
		tok[0] = parse.exprs(null, 10);
		parse.advance(')');
		tok[1] = parse.block();
		return tok;
	};
	add('break').reserve().statement = function (tok) {
		parse.advance(';');
		return tok;
	};
	add('while').reserve().statement = function (tok) {
		parse.advance('(');
		tok[0] = parse.exprs(null, 10);
		parse.advance(')');
		tok[1] = parse.block();
		return tok;
	};
	add('until').reserve().statement = add('while').statement;
	add('unless').reserve().statement = add('if').statement;
	add('import').reserve().statement = function (tok) {
		parse.pathlist(tok);
		parse.advance(';');
		return tok;
	};
	add('switch').reserve().statement = function (tok) {
		return tok;
	};
	add('return').reserve().statement = function (tok) {
		if (symbol().id !== ';') {
			tok[0] = parse.exprs(null, 10);
		}
		parse.advance(';');
		return tok;
	};
	add('yield').reserve().statement = add('return').statement;
	add('extends').reserve().statement = function (tok) {
		parse.pathlist(tok);
		parse.advance(';');
		return tok;
	};
	return this;
};
*/