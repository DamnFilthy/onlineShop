/*global require module*/
/*
(function(){"use strict";
	function Symbol (parse, id) {return this.initSymbol(parse, id);}
	var Symbol_ = Symbol._ = function Symbol_ () {return this;},
	    symbol = Symbol_.prototype = Symbol.prototype;
	Symbol.check = function (obj) {
		return obj && obj.initSymbol === symbol.initSymbol;
	};
	Symbol.create = function (obj, args) {
		obj = obj || new Symbol_();
		obj.initSymbol = symbol.initSymbol || function (parse, id) {
			if (parse.symbols[id]) {
				return parse.symbols[id];
			}
			(this.parse = parse).symbols[id] = this;
			this.id = id;
			this.power = 0;
			return this;
		};
		obj.has = function (kind) {
			return this.hasOwnProperty(kind);
		};
		obj.set = function (obj) {
			if (!obj) return this;
			for (var p in obj) if (obj.hasOwnProperty(p)) {
				this[p] = obj[p];
			}
			return this;
		};
		obj.reserve = function (tok) {
			this.parse.scope.reserve(tok, this);
			return this;
		};
		obj.warn = function (msg, tok, left) {
			this.parse.warn(msg, tok, left);
			return this;
		};
		obj.error = function (msg, tok, left) {
			this.parse.error(msg, tok, left);
			return this;
		};
		obj.prefix = function (tok) {// null denotation
			this.error('Missing operator.', tok);
			return tok;
		};
		obj.infix = function (tok, left) {// left denotation
			this.error('Undefined.', tok, left);
			return tok;
		};
		obj.statement = function (tok) {// statement denotation
			this.error('Missing statement.', tok);
			return tok;
		};
		obj.defaultPrefix = function (tok) {
			tok[0] = this.parse.expr(this.power);
			return tok;
		};
		obj.defaultConstant = function (tok) {
			tok[0] = this.text;
			return tok;
		};
		obj.defaultInfix = function (tok, left) {
			tok[0] = left;
			tok[1] = this.parse.expr(this.power);
			return tok;
		};
		obj.defaultInfixRight = function (tok, left) {
			tok[0] = left;
			tok[1] = this.parse.expr(this.power - 1);
			return tok;
		};
		obj.setupPrefix = function (power, prefix) {
			this.power = power || this.power || 150;
			this.prefix = prefix || this.defaultPrefix;
			return this;
		};
		obj.setupConstant = function (text, constant) {
			this.text = text;
			this.prefix = constant || this.defaultConstant;
			return this;
		};
		obj.setupInfix = function (power, infix) {
			this.power = power || 0;
			this.infix = infix || this.defaultInfix;
			return this;
		};
		obj.setupInfixRight = function (power, infixRight) {
			return this.setupInfix(power, infixRight || this.defaultInfixRight);
		};
		obj.setupAssignment = function (power, assignment) {
			return this.setupInfixRight(power, assignment);
		};
		if (args) obj.initSymbol.apply(obj, args);
		return obj;
	};
	(module.exports = Symbol).create(symbol);
}).call(this);
*/