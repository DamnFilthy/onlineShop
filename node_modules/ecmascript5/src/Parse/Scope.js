/*global require module*/
/*
(function(){"use strict";
	function Scope (parse) {return this.initScope(parse);}
	var Scope_ = Scope._ = function Scope_ () {return this;},
	    scope = Scope_.prototype = Scope.prototype;
	Scope.check = function (obj) {
		return obj && obj.initScope === scope.initScope;
	};
	Scope.create = function (obj, args) {
		obj = obj || new Scope_();
		obj.initScope = scope.initScope || function (parse) {
			this.parent = parse.scope || this;
			(this.parse = parse).scope = this;
			this.defs = {};
			return this;
		};
		obj.pop = function () {
			this.parse.scope = this.parent;
			return this;
		};
		obj.define = function (tok, symbol) {
			var def = this.find(tok, symbol);
			if (tok) {
				if (def) {
					symbol.error(
						'Already ' + (tok.reserved ? 'reserved' : 'defined') + ': ' + tok.text,
						tok
					);
					return def;
				}
				def = this.defs[tok.text] = tok;
			} else {
				def = this.defs[symbol.id] = symbol;
			}
			return def;
		};
		obj.reserve = function (tok, symbol) {
			var def = this.define(tok, symbol);
			if (def) def.reserved = true;
			return def;
		};
		obj.find = function (tok, symbol) {
			var scope = this,
			    name = tok && tok.text || symbol.id,
			    def;
			while (scope.parent !== scope) {
				if (scope.defs.hasOwnProperty(name)) {
					def = scope.defs[name];
					if (def) return def;
				}
				scope = scope.parent;
			}
			return null;
		};
		if (args) obj.initScope.apply(obj, args);
		return obj;
	};
	(module.exports = Scope).create(scope);
}).call(this);
*/